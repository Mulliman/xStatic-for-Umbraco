//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace XStatic.RemoteOperations
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client
    {
#pragma warning disable 8618
        private string _baseUrl;
#pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActionModel> CreatePostActionAsync(ActionUpdateModel body)
        {
            return CreatePostActionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActionModel> CreatePostActionAsync(ActionUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/actions/create-post-action"
                    urlBuilder_.Append("api/v1/xstatic/actions/create-post-action");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActionModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeletePostActionAsync(int? id)
        {
            return DeletePostActionAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePostActionAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/actions/delete-post-action"
                    urlBuilder_.Append("api/v1/xstatic/actions/delete-post-action");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActionModel>> GetPostActionsAsync()
        {
            return GetPostActionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActionModel>> GetPostActionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/actions/get-post-actions"
                    urlBuilder_.Append("api/v1/xstatic/actions/get-post-actions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ActionModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActionModel> UpdatePostActionAsync(ActionUpdateModel body)
        {
            return UpdatePostActionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActionModel> UpdatePostActionAsync(ActionUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/actions/update-post-action"
                    urlBuilder_.Append("api/v1/xstatic/actions/update-post-action");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActionModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExportTypeModel> CreateExportTypeAsync(ExportTypeUpdateModel body)
        {
            return CreateExportTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExportTypeModel> CreateExportTypeAsync(ExportTypeUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/config/create-export-type"
                    urlBuilder_.Append("api/v1/xstatic/config/create-export-type");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExportTypeModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteExportTypeAsync(int? id)
        {
            return DeleteExportTypeAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteExportTypeAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/config/delete-export-type"
                    urlBuilder_.Append("api/v1/xstatic/config/delete-export-type");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<XStaticConfig> GetConfigAsync()
        {
            return GetConfigAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<XStaticConfig> GetConfigAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/config/get-config"
                    urlBuilder_.Append("api/v1/xstatic/config/get-config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<XStaticConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<XStaticSettings> GetSettingsAsync()
        {
            return GetSettingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<XStaticSettings> GetSettingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/config/get-settings"
                    urlBuilder_.Append("api/v1/xstatic/config/get-settings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<XStaticSettings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExportTypeModel> UpdateExportTypeAsync(ExportTypeUpdateModel body)
        {
            return UpdateExportTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExportTypeModel> UpdateExportTypeAsync(ExportTypeUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/config/update-export-type"
                    urlBuilder_.Append("api/v1/xstatic/config/update-export-type");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExportTypeModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<XStaticResult> DeploySiteAsync(int? staticSiteId)
        {
            return DeploySiteAsync(staticSiteId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<XStaticResult> DeploySiteAsync(int? staticSiteId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/deploy/deploy-site"
                    urlBuilder_.Append("api/v1/xstatic/deploy/deploy-site");
                    urlBuilder_.Append('?');
                    if (staticSiteId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("staticSiteId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(staticSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<XStaticResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The authenticated user do not have access to this resource", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AutoCreateDeploymentTargetResult> AutoCreateDeploymentTargetAsync(DeploymentTargetCreatorPostModel body)
        {
            return AutoCreateDeploymentTargetAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AutoCreateDeploymentTargetResult> AutoCreateDeploymentTargetAsync(DeploymentTargetCreatorPostModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/deployment-targets/auto-create-deployment-target"
                    urlBuilder_.Append("api/v1/xstatic/deployment-targets/auto-create-deployment-target");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AutoCreateDeploymentTargetResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeploymentTargetModel> CreateDeploymentTargetAsync(DeploymentTargetUpdateModel body)
        {
            return CreateDeploymentTargetAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeploymentTargetModel> CreateDeploymentTargetAsync(DeploymentTargetUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/deployment-targets/create-deployment-target"
                    urlBuilder_.Append("api/v1/xstatic/deployment-targets/create-deployment-target");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentTargetModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteDeploymentTargetAsync(int? id)
        {
            return DeleteDeploymentTargetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteDeploymentTargetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/deployment-targets/delete-deployment-target"
                    urlBuilder_.Append("api/v1/xstatic/deployment-targets/delete-deployment-target");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentTargetModel>> GetDeploymentTargetsAsync()
        {
            return GetDeploymentTargetsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentTargetModel>> GetDeploymentTargetsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/deployment-targets/get-deployment-targets"
                    urlBuilder_.Append("api/v1/xstatic/deployment-targets/get-deployment-targets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DeploymentTargetModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeploymentTargetModel> UpdateDeploymentTargetAsync(DeploymentTargetUpdateModel body)
        {
            return UpdateDeploymentTargetAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeploymentTargetModel> UpdateDeploymentTargetAsync(DeploymentTargetUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/deployment-targets/update-deployment-target"
                    urlBuilder_.Append("api/v1/xstatic/deployment-targets/update-deployment-target");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentTargetModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        ///// <returns>OK</returns>
        ///// <exception cref="ApiException">A server side error occurred.</exception>
        //public virtual System.Threading.Tasks.Task<FileResponse> DownloadSiteAsync(int? staticSiteId)
        //{
        //    return DownloadSiteAsync(staticSiteId, System.Threading.CancellationToken.None);
        //}

        ///// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        ///// <returns>OK</returns>
        ///// <exception cref="ApiException">A server side error occurred.</exception>
        //public virtual async System.Threading.Tasks.Task<FileResponse> DownloadSiteAsync(int? staticSiteId, System.Threading.CancellationToken cancellationToken)
        //{
        //    var client_ = _httpClient;
        //    var disposeClient_ = false;
        //    try
        //    {
        //        using (var request_ = new System.Net.Http.HttpRequestMessage())
        //        {
        //            request_.Method = new System.Net.Http.HttpMethod("GET");
        //            request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

        //            var urlBuilder_ = new System.Text.StringBuilder();
        //            if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
        //            // Operation Path: "api/v1/xstatic/download/download-site"
        //            urlBuilder_.Append("api/v1/xstatic/download/download-site");
        //            urlBuilder_.Append('?');
        //            if (staticSiteId != null)
        //            {
        //                urlBuilder_.Append(System.Uri.EscapeDataString("staticSiteId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(staticSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
        //            }
        //            urlBuilder_.Length--;

        //            PrepareRequest(client_, request_, urlBuilder_);

        //            var url_ = urlBuilder_.ToString();
        //            request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

        //            PrepareRequest(client_, request_, url_);

        //            var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
        //            var disposeResponse_ = true;
        //            try
        //            {
        //                var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
        //                foreach (var item_ in response_.Headers)
        //                    headers_[item_.Key] = item_.Value;
        //                if (response_.Content != null && response_.Content.Headers != null)
        //                {
        //                    foreach (var item_ in response_.Content.Headers)
        //                        headers_[item_.Key] = item_.Value;
        //                }

        //                ProcessResponse(client_, response_);

        //                var status_ = (int)response_.StatusCode;
        //                if (status_ == 200)
        //                {
        //                    var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
        //                    if (objectResponse_.Object == null)
        //                    {
        //                        throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
        //                    }
        //                    return objectResponse_.Object;
        //                }
        //                else
        //                if (status_ == 401)
        //                {
        //                    string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
        //                    throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
        //                }
        //                else
        //                if (status_ == 403)
        //                {
        //                    string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
        //                    throw new ApiException("The authenticated user do not have access to this resource", status_, responseText_, headers_, null);
        //                }
        //                else
        //                {
        //                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
        //                    throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
        //                }
        //            }
        //            finally
        //            {
        //                if (disposeResponse_)
        //                    response_.Dispose();
        //            }
        //        }
        //    }
        //    finally
        //    {
        //        if (disposeClient_)
        //            client_.Dispose();
        //    }
        //}

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RebuildProcessResult> GenerateSiteAsync(int? staticSiteId)
        {
            return GenerateSiteAsync(staticSiteId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RebuildProcessResult> GenerateSiteAsync(int? staticSiteId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/generate/generate-site"
                    urlBuilder_.Append("api/v1/xstatic/generate/generate-site");
                    urlBuilder_.Append('?');
                    if (staticSiteId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("staticSiteId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(staticSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RebuildProcessResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The authenticated user do not have access to this resource", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SiteApiModel>> ClearStoredSiteAsync(int? staticSiteId)
        {
            return ClearStoredSiteAsync(staticSiteId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SiteApiModel>> ClearStoredSiteAsync(int? staticSiteId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/sites/clear-stored-site"
                    urlBuilder_.Append("api/v1/xstatic/sites/clear-stored-site");
                    urlBuilder_.Append('?');
                    if (staticSiteId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("staticSiteId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(staticSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SiteApiModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SiteApiModel> CreateAsync(SiteUpdateModel body)
        {
            return CreateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SiteApiModel> CreateAsync(SiteUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/sites/create"
                    urlBuilder_.Append("api/v1/xstatic/sites/create");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SiteApiModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteAsync(int? staticSiteId)
        {
            return DeleteAsync(staticSiteId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAsync(int? staticSiteId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/sites/delete"
                    urlBuilder_.Append("api/v1/xstatic/sites/delete");
                    urlBuilder_.Append('?');
                    if (staticSiteId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("staticSiteId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(staticSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SiteApiModel>> GetAllAsync()
        {
            return GetAllAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SiteApiModel>> GetAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/sites/get-all"
                    urlBuilder_.Append("api/v1/xstatic/sites/get-all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SiteApiModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SiteDependenciesModel> GetSiteDependenciesAsync()
        {
            return GetSiteDependenciesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SiteDependenciesModel> GetSiteDependenciesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/sites/get-site-dependencies"
                    urlBuilder_.Append("api/v1/xstatic/sites/get-site-dependencies");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SiteDependenciesModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SiteApiModel> UpdateAsync(SiteUpdateModel body)
        {
            return UpdateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SiteApiModel> UpdateAsync(SiteUpdateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/xstatic/sites/update"
                    urlBuilder_.Append("api/v1/xstatic/sites/update");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SiteApiModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource is protected and requires an authentication token", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public ConfigurableTypeModel Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionUpdateModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string> Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assembly
    {

        [System.Text.Json.Serialization.JsonPropertyName("definedTypes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TypeInfo> DefinedTypes { get; set; } = new System.Collections.ObjectModel.Collection<TypeInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("exportedTypes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Type> ExportedTypes { get; set; } = new System.Collections.ObjectModel.Collection<Type>();

        [System.Text.Json.Serialization.JsonPropertyName("codeBase")]
        [System.Obsolete]
        public string CodeBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entryPoint")]
        public MethodInfo EntryPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("imageRuntimeVersion")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ImageRuntimeVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isDynamic")]
        public bool IsDynamic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Location { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectionOnly")]
        public bool ReflectionOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFullyTrusted")]
        public bool IsFullyTrusted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("escapedCodeBase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Obsolete]
        public string EscapedCodeBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("manifestModule")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module ManifestModule { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("modules")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Module> Modules { get; set; } = new System.Collections.ObjectModel.Collection<Module>();

        [System.Text.Json.Serialization.JsonPropertyName("globalAssemblyCache")]
        [System.Obsolete]
        public bool GlobalAssemblyCache { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostContext")]
        public long HostContext { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityRuleSet")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SecurityRuleSet SecurityRuleSet { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AutoCreateDeploymentTargetResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasSuccessful")]
        public bool WasSuccessful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exception")]
        public Exception Exception { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public DeploymentTargetModel Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CallingConventions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VarArgs")]
        VarArgs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HasThis")]
        HasThis = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExplicitThis")]
        ExplicitThis = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigurableTypeField
    {

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string Alias { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("editorUiAlias")]
        public string EditorUiAlias { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigurableTypeModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<ConfigurableTypeField> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConstructorInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodImplAttributes MethodImplementationFlags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CallingConventions CallingConvention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]
        public bool IsConstructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]
        public bool IsFinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]
        public bool IsHideBySig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]
        public bool IsVirtual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]
        public bool IsConstructedGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]
        public bool IsGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]
        public bool IsGenericMethodDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeMethodHandle MethodHandle { get; set; } = new RuntimeMethodHandle();

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeData
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributeType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type AttributeType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("constructor")]
        [System.ComponentModel.DataAnnotations.Required]
        public ConstructorInfo Constructor { get; set; } = new ConstructorInfo();

        [System.Text.Json.Serialization.JsonPropertyName("constructorArguments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeTypedArgument> ConstructorArguments { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeTypedArgument>();

        [System.Text.Json.Serialization.JsonPropertyName("namedArguments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeNamedArgument> NamedArguments { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeNamedArgument>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeNamedArgument
    {

        [System.Text.Json.Serialization.JsonPropertyName("memberInfo")]
        [System.ComponentModel.DataAnnotations.Required]
        public MemberInfo MemberInfo { get; set; } = new MemberInfo();

        [System.Text.Json.Serialization.JsonPropertyName("typedValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomAttributeTypedArgument TypedValue { get; set; } = new CustomAttributeTypedArgument();

        [System.Text.Json.Serialization.JsonPropertyName("memberName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isField")]
        public bool IsField { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeTypedArgument
    {

        [System.Text.Json.Serialization.JsonPropertyName("argumentType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type ArgumentType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeployerField
    {

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string Alias { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("help")]
        public string Help { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("editorUiAlias")]
        public string EditorUiAlias { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeployerModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("help")]
        public string Help { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<DeployerField> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentTargetCreatorModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("help")]
        public string Help { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<DeployerField> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentTargetCreatorPostModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creator")]
        public string Creator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.IDictionary<string, string> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentTargetModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deployerDefinition")]
        public string DeployerDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("help")]
        public string Help { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<DeployerField> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentTargetUpdateModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deployerDefinition")]
        public string DeployerDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.IDictionary<string, string> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addMethod")]
        public MethodInfo AddMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("removeMethod")]
        public MethodInfo RemoveMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("raiseMethod")]
        public MethodInfo RaiseMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMulticast")]
        public bool IsMulticast { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventHandlerType")]
        public Type EventHandlerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventMessageTypeModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportTypeModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("generator")]
        public TypeModel Generator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transformerFactory")]
        public TypeModel TransformerFactory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fileNameGenerator")]
        public TypeModel FileNameGenerator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportTypeUpdateModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transformerFactory")]
        public string TransformerFactory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("generator")]
        public string Generator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fileNameGenerator")]
        public string FileNameGenerator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FieldAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PrivateScope")]
        PrivateScope = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FamANDAssem")]
        FamANDAssem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Assembly")]
        Assembly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Family")]
        Family = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamORAssem")]
        FamORAssem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FieldAccessMask")]
        FieldAccessMask = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"InitOnly")]
        InitOnly = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Literal")]
        Literal = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NotSerialized")]
        NotSerialized = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"HasFieldRVA")]
        HasFieldRVA = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HasFieldMarshal")]
        HasFieldMarshal = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PinvokeImpl")]
        PinvokeImpl = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDefault")]
        HasDefault = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fieldType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type FieldType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("isInitOnly")]
        public bool IsInitOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLiteral")]
        public bool IsLiteral { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNotSerialized")]
        [System.Obsolete]
        public bool IsNotSerialized { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPinvokeImpl")]
        public bool IsPinvokeImpl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fieldHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeFieldHandle FieldHandle { get; set; } = new RuntimeFieldHandle();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenerateItemResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasSuccessful")]
        public bool WasSuccessful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string Item { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GenericParameterAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Covariant")]
        Covariant = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Contravariant")]
        Contravariant = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VarianceMask")]
        VarianceMask = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReferenceTypeConstraint")]
        ReferenceTypeConstraint = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NotNullableValueTypeConstraint")]
        NotNullableValueTypeConstraint = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DefaultConstructorConstraint")]
        DefaultConstructorConstraint = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialConstraintMask")]
        SpecialConstraintMask = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AllowByRefLike")]
        AllowByRefLike = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ICustomAttributeProvider
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntPtr
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LayoutKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sequential")]
        Sequential = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Explicit")]
        Explicit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemberInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MemberTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Constructor")]
        Constructor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Event")]
        Event = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Field")]
        Field = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Method")]
        Method = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TypeInfo")]
        TypeInfo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedType")]
        NestedType = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MethodAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PrivateScope")]
        PrivateScope = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReuseSlot")]
        ReuseSlot = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FamANDAssem")]
        FamANDAssem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Assembly")]
        Assembly = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Family")]
        Family = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FamORAssem")]
        FamORAssem = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MemberAccessMask")]
        MemberAccessMask = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnmanagedExport")]
        UnmanagedExport = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Final")]
        Final = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Virtual")]
        Virtual = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HideBySig")]
        HideBySig = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NewSlot")]
        NewSlot = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"VtableLayoutMask")]
        VtableLayoutMask = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckAccessOnOverride")]
        CheckAccessOnOverride = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Abstract")]
        Abstract = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PinvokeImpl")]
        PinvokeImpl = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"HasSecurity")]
        HasSecurity = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RequireSecObject")]
        RequireSecObject = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MethodBase
    {

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodImplAttributes MethodImplementationFlags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CallingConventions CallingConvention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]
        public bool IsConstructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]
        public bool IsFinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]
        public bool IsHideBySig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]
        public bool IsVirtual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]
        public bool IsConstructedGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]
        public bool IsGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]
        public bool IsGenericMethodDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeMethodHandle MethodHandle { get; set; } = new RuntimeMethodHandle();

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]
        public bool IsSecurityTransparent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MethodImplAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Managed")]
        Managed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Native")]
        Native = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIL")]
        OPTIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CodeTypeMask")]
        CodeTypeMask = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Runtime")]
        Runtime = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagedMask")]
        ManagedMask = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Unmanaged")]
        Unmanaged = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoInlining")]
        NoInlining = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ForwardRef")]
        ForwardRef = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Synchronized")]
        Synchronized = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NoOptimization")]
        NoOptimization = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreserveSig")]
        PreserveSig = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AggressiveInlining")]
        AggressiveInlining = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AggressiveOptimization")]
        AggressiveOptimization = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalCall")]
        InternalCall = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MaxMethodImplVal")]
        MaxMethodImplVal = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MethodInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodImplAttributes MethodImplementationFlags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CallingConventions CallingConvention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]
        public bool IsConstructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]
        public bool IsFinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]
        public bool IsHideBySig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]
        public bool IsVirtual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]
        public bool IsConstructedGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]
        public bool IsGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]
        public bool IsGenericMethodDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeMethodHandle MethodHandle { get; set; } = new RuntimeMethodHandle();

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("returnParameter")]
        [System.ComponentModel.DataAnnotations.Required]
        public ParameterInfo ReturnParameter { get; set; } = new ParameterInfo();

        [System.Text.Json.Serialization.JsonPropertyName("returnType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type ReturnType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("returnTypeCustomAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICustomAttributeProvider ReturnTypeCustomAttributes { get; set; } = new ICustomAttributeProvider();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Module
    {

        [System.Text.Json.Serialization.JsonPropertyName("assembly")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assembly Assembly { get; set; } = new Assembly();

        [System.Text.Json.Serialization.JsonPropertyName("fullyQualifiedName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FullyQualifiedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mdStreamVersion")]
        public int MdStreamVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moduleVersionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ModuleVersionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ScopeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moduleHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public ModuleHandle ModuleHandle { get; set; } = new ModuleHandle();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("mdStreamVersion")]
        public int MdStreamVersion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationHeaderModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventMessageTypeModel Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParameterAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"In")]
        In = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Out")]
        Out = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Lcid")]
        Lcid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Retval")]
        Retval = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Optional")]
        Optional = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDefault")]
        HasDefault = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HasFieldMarshal")]
        HasFieldMarshal = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved3")]
        Reserved3 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved4")]
        Reserved4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParameterAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("member")]
        [System.ComponentModel.DataAnnotations.Required]
        public MemberInfo Member { get; set; } = new MemberInfo();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parameterType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type ParameterType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int Position { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIn")]
        public bool IsIn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLcid")]
        public bool IsLcid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOptional")]
        public bool IsOptional { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOut")]
        public bool IsOut { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRetval")]
        public bool IsRetval { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]
        public object DefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rawDefaultValue")]
        public object RawDefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasDefaultValue")]
        public bool HasDefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertyAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDefault")]
        HasDefault = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved2")]
        Reserved2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved3")]
        Reserved3 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved4")]
        Reserved4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PropertyInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type PropertyType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PropertyAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canRead")]
        public bool CanRead { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canWrite")]
        public bool CanWrite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("getMethod")]
        public MethodInfo GetMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("setMethod")]
        public MethodInfo SetMethod { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RebuildProcessResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasSuccessful")]
        public bool WasSuccessful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<GenerateItemResult> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("warnings")]
        public System.Collections.Generic.ICollection<GenerateItemResult> Warnings { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildTime")]
        public long BuildTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exception")]
        public string Exception { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exceptionTrace")]
        public string ExceptionTrace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuntimeFieldHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public IntPtr Value { get; set; } = new IntPtr();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuntimeMethodHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public IntPtr Value { get; set; } = new IntPtr();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuntimeTypeHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public IntPtr Value { get; set; } = new IntPtr();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SafeActionModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SafeDeploymentTargetModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deployerDefinition")]
        public string DeployerDefinition { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityRuleSet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Level1")]
        Level1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Level2")]
        Level2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteApiModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("autoPublish")]
        public bool AutoPublish { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rootNode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid RootNode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mediaRootNodes")]
        public System.Collections.Generic.ICollection<System.Guid> MediaRootNodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exportFormat")]
        public int ExportFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastRun")]
        public System.DateTimeOffset? LastRun { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastBuildDurationInSeconds")]
        public int? LastBuildDurationInSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastDeployed")]
        public System.DateTimeOffset? LastDeployed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastDeployDurationInSeconds")]
        public int? LastDeployDurationInSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assetPaths")]
        public string AssetPaths { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targetHostname")]
        public string TargetHostname { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("imageCrops")]
        public string ImageCrops { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deploymentTarget")]
        public int? DeploymentTarget { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postGenerationActionIds")]
        public System.Collections.Generic.ICollection<int> PostGenerationActionIds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cultures")]
        public System.Collections.Generic.ICollection<string> Cultures { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rootPath")]
        public string RootPath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exportTypeName")]
        public string ExportTypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("folderSize")]
        public string FolderSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteDependenciesModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("actions")]
        public System.Collections.Generic.ICollection<SafeActionModel> Actions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exportTypes")]
        public System.Collections.Generic.ICollection<ExportTypeModel> ExportTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deployers")]
        public System.Collections.Generic.ICollection<SafeDeploymentTargetModel> Deployers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteUpdateModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("autoPublish")]
        public bool AutoPublish { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rootNode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid RootNode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mediaRootNodes")]
        public System.Collections.Generic.ICollection<System.Guid> MediaRootNodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exportFormat")]
        public int ExportFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assetPaths")]
        public string AssetPaths { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targetHostname")]
        public string TargetHostname { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("imageCrops")]
        public string ImageCrops { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deploymentTarget")]
        public int? DeploymentTarget { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postGenerationActionIds")]
        public System.Collections.Generic.ICollection<int> PostGenerationActionIds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cultures")]
        public System.Collections.Generic.ICollection<string> Cultures { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StructLayoutAttribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        [System.ComponentModel.DataAnnotations.Required]
        public object TypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LayoutKind Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assemblyQualifiedName")]
        public string AssemblyQualifiedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assembly")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assembly Assembly { get; set; } = new Assembly();

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("isInterface")]
        public bool IsInterface { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNested")]
        public bool IsNested { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringMethod")]
        public MethodBase DeclaringMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("underlyingSystemType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type UnderlyingSystemType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("isTypeDefinition")]
        public bool IsTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isArray")]
        public bool IsArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRef")]
        public bool IsByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPointer")]
        public bool IsPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericType")]
        public bool IsConstructedGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericParameter")]
        public bool IsGenericParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeParameter")]
        public bool IsGenericTypeParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodParameter")]
        public bool IsGenericMethodParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericType")]
        public bool IsGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeDefinition")]
        public bool IsGenericTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSZArray")]
        public bool IsSZArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVariableBoundArray")]
        public bool IsVariableBoundArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRefLike")]
        public bool IsByRefLike { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFunctionPointer")]
        public bool IsFunctionPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnmanagedFunctionPointer")]
        public bool IsUnmanagedFunctionPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasElementType")]
        public bool HasElementType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericTypeArguments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Type> GenericTypeArguments { get; set; } = new System.Collections.ObjectModel.Collection<Type>();

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterPosition")]
        public int GenericParameterPosition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterAttributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenericParameterAttributes GenericParameterAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TypeAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isImport")]
        public bool IsImport { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSealed")]
        public bool IsSealed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isClass")]
        public bool IsClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedAssembly")]
        public bool IsNestedAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamANDAssem")]
        public bool IsNestedFamANDAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamily")]
        public bool IsNestedFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamORAssem")]
        public bool IsNestedFamORAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPrivate")]
        public bool IsNestedPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPublic")]
        public bool IsNestedPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNotPublic")]
        public bool IsNotPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoLayout")]
        public bool IsAutoLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExplicitLayout")]
        public bool IsExplicitLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLayoutSequential")]
        public bool IsLayoutSequential { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAnsiClass")]
        public bool IsAnsiClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoClass")]
        public bool IsAutoClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnicodeClass")]
        public bool IsUnicodeClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCOMObject")]
        public bool IsCOMObject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isContextful")]
        public bool IsContextful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]
        public bool IsEnum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarshalByRef")]
        public bool IsMarshalByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrimitive")]
        public bool IsPrimitive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isValueType")]
        public bool IsValueType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSignatureType")]
        public bool IsSignatureType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("structLayoutAttribute")]
        public StructLayoutAttribute StructLayoutAttribute { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeInitializer")]
        public ConstructorInfo TypeInitializer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeTypeHandle TypeHandle { get; set; } = new RuntimeTypeHandle();

        [System.Text.Json.Serialization.JsonPropertyName("guid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Guid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseType")]
        public Type BaseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSerializable")]
        [System.Obsolete]
        public bool IsSerializable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVisible")]
        public bool IsVisible { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TypeAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotPublic")]
        NotPublic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoLayout")]
        AutoLayout = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AnsiClass")]
        AnsiClass = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Class")]
        Class = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedPublic")]
        NestedPublic = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedPrivate")]
        NestedPrivate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedFamily")]
        NestedFamily = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedAssembly")]
        NestedAssembly = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedFamANDAssem")]
        NestedFamANDAssem = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VisibilityMask")]
        VisibilityMask = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedFamORAssem")]
        NestedFamORAssem = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SequentialLayout")]
        SequentialLayout = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ExplicitLayout")]
        ExplicitLayout = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LayoutMask")]
        LayoutMask = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Interface")]
        Interface = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ClassSemanticsMask")]
        ClassSemanticsMask = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Abstract")]
        Abstract = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Sealed")]
        Sealed = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Import")]
        Import = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Serializable")]
        Serializable = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsRuntime")]
        WindowsRuntime = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UnicodeClass")]
        UnicodeClass = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoClass")]
        AutoClass = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"StringFormatMask")]
        StringFormatMask = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomFormatClass")]
        CustomFormatClass = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"HasSecurity")]
        HasSecurity = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BeforeFieldInit")]
        BeforeFieldInit = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomFormatMask")]
        CustomFormatMask = 31,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TypeInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; } = new System.Collections.ObjectModel.Collection<CustomAttributeData>();

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assemblyQualifiedName")]
        public string AssemblyQualifiedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assembly")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assembly Assembly { get; set; } = new Assembly();

        [System.Text.Json.Serialization.JsonPropertyName("module")]
        [System.ComponentModel.DataAnnotations.Required]
        public Module Module { get; set; } = new Module();

        [System.Text.Json.Serialization.JsonPropertyName("isInterface")]
        public bool IsInterface { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNested")]
        public bool IsNested { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringMethod")]
        public MethodBase DeclaringMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("underlyingSystemType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Type UnderlyingSystemType { get; set; } = new Type();

        [System.Text.Json.Serialization.JsonPropertyName("isTypeDefinition")]
        public bool IsTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isArray")]
        public bool IsArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRef")]
        public bool IsByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPointer")]
        public bool IsPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericType")]
        public bool IsConstructedGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericParameter")]
        public bool IsGenericParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeParameter")]
        public bool IsGenericTypeParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodParameter")]
        public bool IsGenericMethodParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericType")]
        public bool IsGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeDefinition")]
        public bool IsGenericTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSZArray")]
        public bool IsSZArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVariableBoundArray")]
        public bool IsVariableBoundArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRefLike")]
        public bool IsByRefLike { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFunctionPointer")]
        public bool IsFunctionPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnmanagedFunctionPointer")]
        public bool IsUnmanagedFunctionPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasElementType")]
        public bool HasElementType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericTypeArguments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Type> GenericTypeArguments { get; set; } = new System.Collections.ObjectModel.Collection<Type>();

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterPosition")]
        public int GenericParameterPosition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterAttributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenericParameterAttributes GenericParameterAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TypeAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isImport")]
        public bool IsImport { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSealed")]
        public bool IsSealed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isClass")]
        public bool IsClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedAssembly")]
        public bool IsNestedAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamANDAssem")]
        public bool IsNestedFamANDAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamily")]
        public bool IsNestedFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamORAssem")]
        public bool IsNestedFamORAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPrivate")]
        public bool IsNestedPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPublic")]
        public bool IsNestedPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNotPublic")]
        public bool IsNotPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoLayout")]
        public bool IsAutoLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExplicitLayout")]
        public bool IsExplicitLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLayoutSequential")]
        public bool IsLayoutSequential { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAnsiClass")]
        public bool IsAnsiClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoClass")]
        public bool IsAutoClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnicodeClass")]
        public bool IsUnicodeClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCOMObject")]
        public bool IsCOMObject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isContextful")]
        public bool IsContextful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]
        public bool IsEnum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarshalByRef")]
        public bool IsMarshalByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrimitive")]
        public bool IsPrimitive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isValueType")]
        public bool IsValueType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSignatureType")]
        public bool IsSignatureType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("structLayoutAttribute")]
        public StructLayoutAttribute StructLayoutAttribute { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeInitializer")]
        public ConstructorInfo TypeInitializer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeHandle")]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeTypeHandle TypeHandle { get; set; } = new RuntimeTypeHandle();

        [System.Text.Json.Serialization.JsonPropertyName("guid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Guid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseType")]
        public Type BaseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSerializable")]
        [System.Obsolete]
        public bool IsSerializable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVisible")]
        public bool IsVisible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericTypeParameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Type> GenericTypeParameters { get; set; } = new System.Collections.ObjectModel.Collection<Type>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredConstructors")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConstructorInfo> DeclaredConstructors { get; set; } = new System.Collections.ObjectModel.Collection<ConstructorInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredEvents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EventInfo> DeclaredEvents { get; set; } = new System.Collections.ObjectModel.Collection<EventInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredFields")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FieldInfo> DeclaredFields { get; set; } = new System.Collections.ObjectModel.Collection<FieldInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredMembers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MemberInfo> DeclaredMembers { get; set; } = new System.Collections.ObjectModel.Collection<MemberInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredMethods")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MethodInfo> DeclaredMethods { get; set; } = new System.Collections.ObjectModel.Collection<MethodInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredNestedTypes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TypeInfo> DeclaredNestedTypes { get; set; } = new System.Collections.ObjectModel.Collection<TypeInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("declaredProperties")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PropertyInfo> DeclaredProperties { get; set; } = new System.Collections.ObjectModel.Collection<PropertyInfo>();

        [System.Text.Json.Serialization.JsonPropertyName("implementedInterfaces")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Type> ImplementedInterfaces { get; set; } = new System.Collections.ObjectModel.Collection<Type>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TypeModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XStaticConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("deployers")]
        public System.Collections.Generic.ICollection<DeployerModel> Deployers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exportTypes")]
        public System.Collections.Generic.ICollection<ExportTypeModel> ExportTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("generators")]
        public System.Collections.Generic.ICollection<TypeModel> Generators { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transformerFactories")]
        public System.Collections.Generic.ICollection<TypeModel> TransformerFactories { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fileNameGenerators")]
        public System.Collections.Generic.ICollection<TypeModel> FileNameGenerators { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postGenerationActions")]
        public System.Collections.Generic.ICollection<ConfigurableTypeModel> PostGenerationActions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deploymentTargetCreators")]
        public System.Collections.Generic.ICollection<DeploymentTargetCreatorModel> DeploymentTargetCreators { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XStaticResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasSuccessful")]
        public bool WasSuccessful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exception")]
        public Exception Exception { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XStaticSettings
    {

        [System.Text.Json.Serialization.JsonPropertyName("isUsingXStaticRoles")]
        public bool IsUsingXStaticRoles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    // TODO(system.text.json): What to do here?
    public partial class Exception
    {

        [System.Text.Json.Serialization.JsonPropertyName("targetSite")]
        public MethodBase TargetSite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("innerException")]
        public Exception InnerException { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("helpLink")]
        public string HelpLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hResult")]
        public int HResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stackTrace")]
        public string StackTrace { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625