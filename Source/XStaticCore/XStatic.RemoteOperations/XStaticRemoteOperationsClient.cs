using Microsoft.Extensions.Logging;
using System.Net.Http.Headers;

namespace XStatic.RemoteOperations
{
    public class XStaticRemoteOperationsClient(string baseUri, string clientId, string clientSecret, ILogger? logger = null)
    {
        public string BaseUri { get; } = baseUri;

        public string ClientId { get; } = clientId;

        public string ClientSecret { get; } = clientSecret;

        public ILogger? Logger { get; } = logger;

        private readonly TokenRetriever _tokenRetriever = new(baseUri);
        private UmbracoAccessToken? _token;

        private HttpClient? _httpClient;

        public async IAsyncEnumerable<BuildDeployResult> GenerateAndDeployAllSites()
        {
            var client = await GetAutoGeneratedClient();
            var allSites = await client.GetAllAsync();

            if (allSites != null)
            {
                foreach (var site in allSites)
                {
                    yield return await BuildAndDeploySite(client, site);
                }
            }
        }

        public async Task<BuildDeployResult> GenerateAndDeploySite(int siteId)
        {
            var client = await GetAutoGeneratedClient();
            var allSites = await client.GetAllAsync();
            var matchingSite = allSites?.FirstOrDefault(s => s.Id == siteId);

            if (matchingSite == null)
            {
                return new BuildDeployResult { Exception = new System.Exception($"No site with ID {siteId} found.") };
            }
                
            return await BuildAndDeploySite(client, matchingSite);
        }

        public async Task<Client> GetAutoGeneratedClient()
        {
            if (_httpClient == null || _token == null || _token.Expiry <= DateTime.Now)
            {
                Logger?.LogDebug("XStaticRemoteOperationsClient - Token expired or not yet retrieved. Getting new token.");
                _token = await _tokenRetriever.GetAccessToken(ClientId, ClientSecret);
                Logger?.LogDebug("XStaticRemoteOperationsClient - Token Retrieved.");

                if (_token?.Value == null)
                {
                    Logger?.LogError("XStaticRemoteOperationsClient - Token Null.");
                    throw new System.Exception("Token not successfully retrieved");
                }

                _httpClient = CreateHttpClient(_token);
            }

            return CreateAutoGeneratedClient(_httpClient);
        }

        protected async Task<BuildDeployResult> BuildAndDeploySite(Client client, SiteApiModel site)
        {
            try
            {
                Logger?.LogInformation("Generating site {site}", site.Name);
                var buildResult = await client.GenerateSiteAsync(site.Id);
                Logger?.LogInformation("Generated site {site}", site.Name);

                Logger?.LogInformation("Deploying site {site}", site.Name);
                var deployResult = site.DeploymentTarget != null ? await client.DeploySiteAsync(site.Id) : null;

                if(deployResult == null)
                {
                    Logger?.LogWarning("Warning, site {site} has no deployment target. Nothing will be deployed.", site.Name);
                }
                else
                {
                    Logger?.LogInformation("Deployed site {site}", site.Name);
                }
                
                return new BuildDeployResult
                {
                    RebuildProcessResult = buildResult,
                    DeployProcessResult = deployResult
                };
            }
            catch (System.Exception ex)
            {
                Logger?.LogError(ex, "Error generating or deploying site {site}", site.Name);
                return new BuildDeployResult { Exception = ex };
            }
        }

        protected virtual Client CreateAutoGeneratedClient(HttpClient httpClient)
        {
            if(httpClient == null)
            {
                throw new System.ArgumentException("Not valid httpClient provided.");
            }
            
            return new Client(BaseUri, _httpClient);
        }

        protected virtual HttpClient CreateHttpClient(UmbracoAccessToken token)
        {
            var httpClient = new HttpClient();

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

            return httpClient;
        }
    }
}
